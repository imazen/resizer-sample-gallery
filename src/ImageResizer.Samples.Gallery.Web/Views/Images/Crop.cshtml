@model ImageResizer.Samples.Gallery.Web.ViewModels.CropViewModel

@{
    ViewBag.Title = "Crop - ImageResizer Responsive Photo Gallery Sample";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section head {
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.11.0/jquery.min.js" type="text/javascript"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-jcrop/0.9.12/js/jquery.Jcrop.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/jquery-jcrop/0.9.12/css/jquery.Jcrop.min.css" type="text/css" />

    <script type="text/javascript">
        $(function () { //On DOM ready
            //Using the 'each' pattern allows multiple cropping image/link pairs per page.
            $('.image-cropper').each(function (unusedIndex, container) {
                container = $(container); //We were passed a DOM reference, convert it to a jquery object

                //Find the image inside 'container' by class ("image")
                var image = container.find("img.image");

                //Trim the querystring off the image URL.
                var path = image.attr('src'); if (path.indexOf('?') > 0) path = path.substr(0, path.indexOf('?'));

                //Define a function to execute when the cropping rectangle changes.
                var update = function (coords) {
                    if (parseInt(coords.w) <= 0 || parseInt(coords.h) <= 0) return; //Require valid width and height

                    //Build the URL based on the coordiantes. The resizing module will handle everything else.
                    var url = path + '?crop=(' + coords.x + ',' + coords.y + ',' + coords.x2 + ',' + coords.y2 +
                    ')&cropxunits=' + image.width() + '&cropyunits=' + image.height()

                    //Now, update the hidden field
                    $("#CroppedImage").val(url);
                }

                //Start up jCrop on the image, specifying our function be called when the selection rectangle changes,
                // and that a 60% black shadow should cover the cropped regions.
                image.Jcrop({ onChange: update, onSelect: update, bgColor: 'black', bgOpacity: 0.6 });
            });
        });
    </script>
}

<div class="pure-g">
    <div class="text-box pure-u-1 pure-u-med-2-3 pure-u-lrg-3-4">
        <div class="l-box">
            <h1 class="text-box-head">Crop</h1>
            <p class="text-box-subhead">Select the region in the below image you'd like to crop.</p>
        </div>
    </div>
    <div class="image-cropper">
        <img src="/Content/Images/Uploads/@Model.Image.FileName" class="image" />
    </div>
    <div class="pure-u-1 form-box">
        <div class="l-box">
            <form method="post" action="@Url.Action("crop")" enctype="multipart/form-data" class="pure-form pure-form-stacked">
                <input type="hidden" id="id" name="id" value="@Model.Image.Id">
                <input type="hidden" id="CroppedImage" name="CroppedImage">
                <button type="submit" class="pure-button">Save</button>
            </form>
        </div>
    </div>
</div>